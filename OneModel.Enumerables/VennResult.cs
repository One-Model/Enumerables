using System.Collections.Generic;

namespace OneModel.Enumerables
{
    /// <summary>
    /// The result of performing a venn comparison on two collections.
    /// </summary>
    public class VennResult<TLeft, TRight>
    {
        /// <summary>
        /// Constructs a new VennResult.
        /// </summary>
        public VennResult(IEnumerable<TLeft> left, IEnumerable<TRight> right, IEnumerable<Pair> both)
        {
            Left = new List<TLeft>(left);
            Right = new List<TRight>(right);
            Both = new List<Pair>(both);
        }

        /// <summary>
        /// Items that were in the left collection only.
        /// </summary>
        public IReadOnlyList<TLeft> Left { get; }

        /// <summary>
        /// Items that were in the right collection only.
        /// </summary>
        public IReadOnlyList<TRight> Right { get; }

        /// <summary>
        /// Items that were in both collections.
        /// </summary>
        public IReadOnlyList<Pair> Both { get; }

        /// <summary>
        /// An item that was in both the left and the right collections.
        /// Holds a reference to the objects from both collections.
        /// </summary>
        public class Pair
        {
            /// <summary>
            /// Constructs a new VennResultPair.
            /// </summary>
            public Pair(TLeft left, TRight right)
            {
                Left = left;
                Right = right;
            }

            /// <summary>
            /// The object from the left collection.
            /// </summary>
            public TLeft Left { get; }

            /// <summary>
            /// The object from the right collection.
            /// </summary>
            public TRight Right { get; }

            //
            // Equality methods generated by Resharper.
            //

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != GetType()) return false;
                return Equals((Pair)obj);
            }

            public override int GetHashCode()
            {
                unchecked
                {
                    return (EqualityComparer<TLeft>.Default.GetHashCode(Left) * 397) ^ EqualityComparer<TRight>.Default.GetHashCode(Right);
                }
            }

            protected bool Equals(Pair other)
            {
                return EqualityComparer<TLeft>.Default.Equals(Left, other.Left) && EqualityComparer<TRight>.Default.Equals(Right, other.Right);
            }
        }
    }
}
